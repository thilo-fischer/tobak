# tobak

+tobak+ is a tool for backing up files which are distributed (redundantly) over several resources.

## Overview

### Use Case

Most computer users today have to deal with their data being distributed among several devices, e.g. the PC they use at home, the laptop they use when traveling, an old PC they used a few years ago, their smartphone, the feature phone they used before, the tablet PC they use when sitting on the couch and surfing the internet, a media PC connected to their TV screen, possibly the PC they use at work (if there is data "belonging" to the user, and not only "his company's" data), an USB hard disc used for sporadic backups, another one for photos and videos, a dozen USB sticks used to move data form one device to the other, a SD card within the camera, a SD card full with photos to be moved to the picture collection (on the PC or on the USB hard disc), and so on and so on ...

Cloud services are a fine way to synchronize some of your data between these devices various devices. But they can be used only for parts of your data and you must put some effort in synchronizing the data stored locally on the devices with the data stored in the cloud.

You *could* store *all* of your data *only* in the cloud given that
- you trust the cloud service provider's confidentiality sufficiently to copy all your personal data to the cloud,
- you trust the cloud service provider's reliability sufficiently to copy all your personal data to the cloud (they will very likely have a far better data redundancy and backup strategy than you can establish on your own, but what is the cloud service runs out of business?),
- the cloud service provides sufficient storage space for all you data,
- you have enough bandwidth to store and access all your data form the cloud and
- you always have access to the cloud (or have according "offline" mechanisms installed) when you need to access your data.

Some of these issues could be addressed by setting up a private cloud service (e.g. https://en.wikipedia.org/wiki/OwnCloud). Still, I don't want to store a lot of my data exclusively in the cloud, I prefer to have most of my data stored locally on some device I own and can access physically.

### What +tobak+ does

+tobak+ is a tool for aggregating data from various resources (computers, smartphones, hard drives, usb sticks, sd cards, etc.) into one single large backup repository. This repository can be located e.g. on a large externel hard disc or on a NAS system. For each resource backed up in the repository and each backup session, a separate directory exists where all files form the resource can be found in an directory tree matching the resource's directory tree at the point in time when the backup was done. If two files with the same content are added to the backup repository, tobak uses hard links to present the file in different directory trees while allocating only once storage space for the file content. Files distributed redundantly over several resources can thus be aggregated efficiently on a single backup resource. Also, multiple backups of the same resource at diffent points in time can be stored in the repository very efficiently as only the changed files require additional storage space.

+tobak+'s main purpose is to backup and aggregate user data. It does so in a transparent but (wrt. storage space) efficient way. The backup repository is set up in a way that access to single files as well as access to a representation of complete backed-up volume is rather simple and straight forward. No data is stored in complex data bases where you need specialized tools to access the contained data, all data storage is file system based and meta data is sotred in human-readable text files (JSON/YAML).

+tobak+ focusses on backing up content, and on backing up user data. You can also use is to back up complete "images" of computers' files systems with operating system installations, its configuration, installed software and contained user data (no boot sector). But tobak does not (yet) provide tools to automatically completely restore backed up file systems such that you could reliably reset a computer to a backed up state completely. (You can restore a lot with just a plain (recursive) file copy form the backup respsitory to the target system, but e.g. file permissions and other file meta data wouldn't get restored.)

### Scope

It is important to note which aspects of data backup are covered by tobak and which are not: tobak neither deals with confidentiality nor reliability of the backup repository (following the Unix DOTADIW principle). Take care to encrypt the device that holds your backup repository and to regularly copy the repository to a redundant medium.

### Naming

The name tobak indicates that the command is used to add files *to* your *ba*c*k*up repository. Its not to honor smoking (see https://en.wikipedia.org/wiki/Health_effects_of_tobacco). 

## License

Copyright (c) 2016--2017  Thilo Fischer

This file is part of tobak.

tobak is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

tobak is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with tobak.  If not, see <http://www.gnu.org/licenses/>.

## Nomenclature

### Repository

tobak backs up data into a directory with a specific folder structure. This backup target directory is called the tobak *repository*.

### Volumes

We use the term *volume* to refer to an entity that contains or is represented as a file system hierarchy: partitions on hard disk/solid state drives, USB flash drives and SD Cards, CD-ROMs, network shares, etc., but also directories within a file system. When files from such volume are added to the tobak repository, the directory structure of that volume will be reflected in the tobak repository. The backed up file's and directory's meta data will be reflected in the repository as well.

### Resources

If several volumes are associated with each other because they are contained in some greater entity or system, we may call this greater entity or system a *resource*. The usual example for what we consider a resource here would be a computer system: It contains at least one, but often multiple volumes like multiple drive partitions on possibly multiple drives. It makes sense to consider this resource a collection of associales volumes rather than a set of indenpendent volumes because data on one of these volumes may have semantical dependencies to data on another volume.

### Session

Every run of the +tobak+ tool is considered a *session*. +tobak+ supports to store multiple versions of a backed up volume, and every version is identified by the *session* which added that version to the repository. A session is identified by and represented through a *tag* (which is typically a reprenestation of the session's date like 2016-12-31, but could be any string that is a valid filename). If several invokations of the +tobak+ executable share the same tag string, they will be considered to run the same session.

## Repository

### Requirements

Usage of hard links is mandatory for tobaks working principle. A tobak repository can only be created on a file system that supports hard link. This is true for most Unix file systems and tobak should work fine with a repository on such file system. Hard links are supported but rather uncommon on NTFS file systems -- so no guarantee whether tobak will work properly when the repository is located on a NTFS partition. FAT32 filesystems for example do not support hard links at all and repositories on such partitions are not supported.

### Layout

A repository is a specifically organized set of files and directories. All of the repository is located in subdirectories of the repositories *top level directory*. The top level directory can be any direcotry nested arbitrarily deep in a file systems directory hierarchy, but it is recommended to choose a directory not nested deeply (to keep file paths shorter), preferably the root directory of the backup volume's file system.
In the following we will use +$REPO+ to refer to the repositories top level directory.

The repository contains directories and files with specific names and functions, but also directories and files with user specified names and of course names that originate from the files backed up in the repository.
- Reserved names and their meanings will be discussed individually below.
- Names given by the user shall not interfere with names of directories or files that have a special meaning to tobak, thus some names are reserved. Apart from that, it is recommended for the user to choose names that are easy to handle, i.e. don't use special characters (apart from +-+ and +_+) in your names, chose names that don't contain spaces (or other whitespace characters). Even given that tobak handles complicated filenames right, working with the repository and using other tools or scripts on the repository would become more error prone.
- Directories and files with names that originate from file systems backed up in the repository will be put into directories that contain only such files with no files with special meaning in tobak and no files with user defines names in it. Thus, name clashed will be avoided here.

A repository consists files and directories as follows.

#### Directory +volumes+

The +volumes+ directory is the directory most relevant to the user. The representations of the volumes backed up is found in here. It may have a user defined internal structure that reflects the meaning of the volumes backed up: related volumes can be grouped together in according directories, and meta and configuration data can be associated with volume groups. 

##### Volume specific directories

Every volume form which files are added to the repository will have specific directories inside the +volume+ directory (one for every backup session). Such directory may have an arbitrary user-defined name and a suffix +.vol+ (for *vol*ume) to make it recognizable as a volume directory. It contains subdirectories +content+ and +c_meta+, both contain a directory hierarchy that reflects the directory hierarchy found on the volume when doing the backup. The files in +content+ contain the content of the files from the volume, the files in +c_meta+ (for *c*ontent *meta*) contain meta information on these files.

The volume specific directory also contains a +meta+ file with meta information on the specific volume and a +log+ directory containing several log files form the backup procedure that integrated the files form that volume into the repositroy. It may also contain a +config+ file with configuration parameters that specify how tobak shall handle the according volume.

Note: +content+, +c_meta+, +meta+ and +log+ won't be direct children of the volume specific direcotry, if this directory contains session-specific tag directories (see below).

##### Directory hierarchy

A volume specific directory may be nested in an arbitrary directory hierarchy within the +volumes+ directory. I.e. a volume directoy +my_volume+ may be located at +$REPO/volumes/my_volume+ or at e.g. +$REPO/volumes/foo/bar/baz/my_volume+. This hierarcy can be used to group volumes; e.g. group volumes form on hard drive of your desktop PC and from the other hard drive of it and then group these with the harddrive volume group of you laptop like: +$REPO/volumes/my_computers/desktop/system_hdd/partition0+, +$REPO/volumes/my_computers/desktop/data_hdd/partition0+, +$REPO/volumes/my_computers/desktop/data_hdd/partition1+, +$REPO/volumes/my_computers/laptop/hdd/partition0+. Or it can be used to group all backups from the CD-ROMs you used to archive your photos, e.g.: +$REPO/volumes/cdrom/photo_archive/2010-01+.

The directory structure can be used to set up configuration options that will apply to a set of volumes: Each directory may contain a +config+ file that may contain (volume related) tobak configuration options. The options defined in such config file will be applied to all volumes contained in that directory (recursively). (Innermost configuration options dominate, i.e. if a child directory sets an option its parent directory already set differently, the child directory's option wins.)

There are two special types of directories that my be used in the volumes subdirectory's hierarchy: Dirctories that decleare *volume groups*, and directories that define *resources*. The latter is just a special case of the first one. These directory's names will be suffixed with +.grp+ or +.res+ respectively. More on the meaning of volume groups and resources in a minute.

Note: To distinct ordinary directories from volume group, resource, and volume directories their names shall neither end with +.grp+, +.res+ nor +.vol+.

##### Session specific directories

Every backup session may create additional, session-specific directories for the volumes backed up. This way, you can keep copies of the volume at different dates. Each backup session is assigned a *tag* specific to that session that identifies the directories created in that session. The common form of a tag is the date (and possibly time) of the backup session like 2016-12-31, but it could be any string that is a valid filename.
Tagging the session adds another level to the directory struture of the +volumes+ directory. The seesion specific directory will have the suffix +.tag+.

Where the addional level is inserted depends on the parent directories of the specific volume directory:
- If none of the volume's ancestor directory (parent directory, grandparent directory, etc. up until +$REPO/volumes+) is a volume group or resource directory (+.grp+ or +.res+ suffix in directory name), the session specific directory will be created as a subdirectory of the volume directory, e.g. for +$REPO/volumes/foo/bar/baz/my_volume+ and a seesion with tag +2016-12-31+ a directory +$REPO/volumes/foo/bar/baz/my_volume/2016-12-31.tag+ will be created.
- If the volume specific directory has (at least) one volume group or resource directory ancestor, the session specific directory will be created as a subdirectory of the outermost volume group or resource directory.

Next to the session specific directories will be one directory called +common+ that contains information persistent among sessions. For volume group or resource directories, +common+ also defines the subdirectory structure to follow within the session specific directories.

+tobak+ sessions may explicitly avoid to add session specific directories (which makes sense e.g. when you backup read-only volumes like CD-ROMs or finalized CD-Rs).

##### Volume Groups and Resources

If you back up several associated volumes in one session, it often makes sense to have a session specific directory common for all volumes, and not one session specific directory per volume as subdirectory of the volume specific directory. E.g. if you back up all partitions of your desktop computer's multiple hard disks, it makes much sense to have the tag directory in a common directory for all the desktop's harddisks like +$REPO/volumes/my_computers/desktop/2016-12-31.tag/system_hdd/partition0+. When you create volume group directories in the directory hierarchy below +$REPO/volumes+ all volumes contained in that directory (directly or recursivly) will share a common session specific directory.
To add a volume group directory, create a directory and simply add the suffix +.grp+ to the directory name.

A resource directory is a special volume group directory where there is some concrete entity that contains the volumes in the group and where additional meta data on that entity can be stored in the backup repository.
To add a volume group directory, create a directory and simply add the suffix +.res+ to the directory name. (XXX?)

An example when to use a resource directory is when the content of a computer system (as a collection of the volumes contained in that system) shall be backed up. Meta data on the resource may contain additional information on the computer system (e.g. which volumes are mounted where resp. which volumes have which drive letters).

Resource directories will probably be the more common case than volume group directories because most real life examples for the usage of volume groups are better represented as resources.

#### Directory +hashes+

For each file content represented in the repository, one directory is created in here named after the file's content's SHA1 hash. (To avoid having too many files in one directory, the hashes directory contains two levels of subdirectories representing the first and second SHA1 digit and the third and fourth SHA1 digit.) The file content specific directory contains two files: +file+ which contains the file's content and +instances+ which contains all paths in the resources directory that refer to files with the given content.
  
#### Directory +sessions+

Stores meta data and log files for +tobak+ sessions as well as symlinks to the session specific directories in the +volumes+ subdirectory hierarchy.
For every session, a subdirectory of +sessions+ named as the session's tag will be created. These session specific subdirectories will have further subdirectories, one for every invokation of the +tobak+ execuable sharing that specific tag.

#### File +tobak-repo+

The file is used to identify the directory as a tobak repository's top level directory.

It contains meta data on the repository, e.g. date of repository creation, compatibility version number of the tobak repository, version number of the tobak program version that the repository is compatible to (which is the tobak version that created the repository initially or that upgraded the repository from a previous to a more recent compatibility version).

#### File +config+

Contains configuration options that apply to the tobak repository.

#### File +readme.txt+

Contains a short explanation text about tobak and about what can be found where in the repository.

## Usage

### Repository Specification

Most +tobak+ invocations operate on a specific tobak repository, and often on objects within that repository.

You can always specify the repository explicitly with the +--repo=<repo-top-level-directory>+ command line option and give objects within that repository relative to the repositories top level directory or the top level directory relevant for that kind of object (e.g. +--volume=volumes/foo/bar/some_volume+ or just +--volume=foo/bar/some_volume+, the latter is the preferred format).

You can also save you the explicit +--repo+ specification and give absolute paths for the objects within the repository like +--volume=<repo-top-level-directory>/volumes/foo/bar/some_volume+. +tobak+ will implicitly derive the repositories top level directory form the object's file paths.

### Repository Initialization

Before you can do any backups, you need to set up a tobak repository. You can create a repository in any directory of a file system that supports hard links, but it is suggested to use a directory not nested too deep in some directory hierarchy. It is suggested to use the root directory of you backup volume or a direct subdirectory of it.

 tobak --init-repo=<repo-top-level-directory>
or
 tobak --repo=<repo-top-level-directory> --init-repo

Note: +tobak+ does not provide any encryption or any access control! This is out of scope, there are other tools out there to handle these issues. You should consider to encrypt your backup repository, i.e. to put the repository on an encrypted file system. You should also run the +tobak+ tool with an appropriate user account; the repository and all the files created by +tobak+ will be owned by the user that runs the +tobak+ program. Depending on your use case, it may be a good idea to create another user account on your system(s) for this specific purpose, or to run +tobak+ from you system's +root+ user account.

### Adding Volumes

#### Subdirectory Structure

When a repository is getting initialized, a +volumes+ directory will be created in the repository's top level directory. You can create an arbitrary subdirectory hierarchy below the +volumes+ directory by simply creating directories with +mkdir+ or you favorite file explorer. (Don't forget to create these with the right ownership and permissions.)

When you create a directory with a direcoty name suffixed with +.grp+, it will be a volume group directory. When you create a directory with a direcotry name suffixed with +.res+, it will be a resource directory. When you intend to add aditional subdirectories below a volume group or resource directory, first add a +common+ directory as direct subdirectory of the +*.{grp,res}+ directory and add further subdirectories in +common+.

TODO It is planned to add an interactive mode for the tobak tool for resouce, volume group and possibly general +volume+ subdirectory creation (in that order of relevance/urgency).

You can run
 tobak --repo=<repo-top-level-directory> --add-host-as-resource=foo/bar/my_resource
or
 tobak --add-host-as-resource=<repo-top-level-directory>/volumes/foo/bar/my_resource
to create a resource directory as +volumes/foo/bar/my_resource+ and make +tobak+ aquire information about the system you now run +tobak+ on and store it as resource meta data.

#### Volumes

To add directories for volume backup to the repository, just run
 tobak --announce --repo=<repo-top-level-directory> --volume=foo/bar/my_resource --source=/path/to/original/volume
or
 tobak --announce --volume=<repo-top-level-directory>/volumes/foo/bar/my_resource --source=/path/to/original/volume

+tobak+ will create the according volume direcotry (+<repo-top-level-directory>/volumes/foo/bar/my_resource.vol+ for the given example) along with the mandatory files and directories within it. It will detect information about the original volume and store is as volume meta data.

If you leave away the +--announce+ command line option, +tobak+ will already start to make a backup of the original volume at the given location.

### Backing Up Volumes

To backup a volume not added to the repository before, you can invoke +tobak+ like
 tobak --repo=<repo-top-level-directory> --volume=foo/bar/my_resource --source=/path/to/original/volume
or
 tobak --volume=<repo-top-level-directory>/volumes/foo/bar/my_resource --source=/path/to/original/volume
(same as adding the volume without the +--announce+ command line option).
Please note that the order of the command line options is relevant: +--source+ must follow +--volume+.
This will first add the volume to the repository (as described above) and then do a backup of the original volume in the repository.

When adding another backup session of a volume already known to the repository, you may leave away
- either the +--volume+ command line option and let +tobak+ determine the correct volume directory in the repository, which will generally work, but may fail in some situations due to ambiguities (+tobak+ will ask you then or state that the +--volume+ switch is mandatory in that situation),
- or the +--source+ command line option if it is still the same as it was the last time the volume was backed up (or as it was when the volume was added to the repository in case there has not been any backup made yet).
It is suggested to rather leave away the +--source+ than the +--volumes+ command line option.

You can backup multiple volumes with one invokation of +tobak+ by giving multiple +--volume+/+--source+ command line option pairs.
You may leave away +--volume+ or +--source+ options as before, as long as you don't leave away the +--source+ at one at the +--volume+ option at the following pair (which would lead to ambiguity: When doing so with e.g. +--volume=vol_a --source=src_a --volume=vol_b --source=src_b+ one gets +--volume=vol_a --source=src_b+ and +tobak+ must assume that +src_b+ shall be backed up as +vol_a+).

You can also backup all volumes in a certain repository directory (if you can leave away +--source+ command line option for all these volumes) by running
 tobak --repo=<repo-top-level-directory> --vol-recurs=foo/bar
. This can be useful to backup resources (or volume groups in general). If the directory in the +--vol-recurs+ command line option is a resource directory (has .res suffix), +tobak+ will also update the resource's meta data (if applicable).
Command line option +--resource+ has the same effect as +--vol-recurs+ for resources, but will give error messages if the given directory is *not* a resource directory. It is suggested to use the +--resource+ command line option if you intend to backup a resource as this will prevent accidental wrong usage (to some degree).

